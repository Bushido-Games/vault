#!/usr/bin/env bash
# version: 1.0.0

function command_help() {
  printf "\
    %s [-p|--project PROJECT_NAME]\r
         [-e|--env ['local' | 'stable'] default: 'local'] COMMAND\r
  " $0 >&2
}

function error_msg() {
  printf "ERROR:\n  $*\n" >&2
  exit 1
}

function get_from_package_json(){
  echo $(cat package.json \
    | grep $1 \
    | head -1 \
    | awk -F: '{ print $2 }' \
    | sed 's/[",]//g')
}

DEFAULT_VAULT_ADDR="http://10.0.21.11:8200"

if [[ ! $VAULT_ADDR ]]; then
  VAULT_ADDR=$DEFAULT_VAULT_ADDR
fi

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      command_help
      exit 0
      ;;
    -p|--project)
      shift
      PROJECT="$1"
      shift
      ;;
    -e|--env)
      shift
      ENVIRONMENT="$1"
      shift
      ;;
    -*|--*)
      error_msg "invalid argument: $1"
      ;;
    *)
      COMMAND="$*"
      break;
      ;;
  esac
done

if [[ -z "$COMMAND" ]]; then
  error_msg "Provide command to run. Example:\n
  $0 docker-compose up\n"
fi

if [[ -z "$GITHUB_TOKEN" ]]; then
  error_msg "No github token found in your environment. Example:\n
  export GITHUB_TOKEN=abcd1234567890\n"
fi

if [[ -z "$ENVIRONMENT" ]]; then
  ENVIRONMENT='local'
fi

if [[ -z "$PROJECT" ]]; then
  PROJECT=$(get_from_package_json name)
fi

if [[ -z "$PROJECT" ]]; then
  error_msg "Please provide project name by -p parameter:\n
  $0 -p SAMPLE_PROJECT_NAME\n
  or through package.json name property
  "
fi

VAULT_TOKEN=$(docker run --rm -e VAULT_ADDR="$VAULT_ADDR" vault sh -c "
  vault login -token-only -no-store -method=github token=${GITHUB_TOKEN};\
  ")

ENVS=$(docker run --rm\
  -e VAULT_ADDR="$VAULT_ADDR"\
  -e VAULT_TOKEN="$VAULT_TOKEN"\
  'hashicorp/envconsul:alpine' -upcase\
  -vault-retry-attempts=3\
  -once\
  -secret "bushido/$ENVIRONMENT/$PROJECT"\
  env | grep 'BUSHIDO'
)

if [[ -z "$ENVS" ]]; then
  error_msg "Incorrect project name"
fi

for VAR in $ENVS
do
  export "$VAR"
done

${COMMAND}
